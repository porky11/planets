(import gl)
(import glut)
(import spatial)
(import util)
(import sequence-math)

(import utility)
(import stdlib)
(import cstdio)
(import math)
(import unique-ptr)
(import macros)
(import concept-defs)
(import concepts)
(import derivations)
(import array)
(import vector)
(import assert)

(def pi (macro intern (void)
  (q 3.14159265358979323846)))

(def pressed (var intern (array-of 256 bool)))

(def is-pressed (fn intern bool ((key char))
  (@$ pressed key)))

(def press (fn intern void ((key char))
  (setf ($ pressed key) true)))

(def release (fn intern void ((key char))
  (setf ($ pressed key) false)))

(def gravity (var intern float 0.00001))



(using-namespace std.macros
(using-namespace std.concepts

  

  (def-type-macro2 Ball)
  (def-concept-macro Ball intern ((T Type) (N Value))
    (let ((B \ (qq Ball (uq T) (uq N)))
          (A \ (qq Array (uq T) (uq N))) ;;vector
          (V \ T)) ;;bivector or rotor
      (qq do
        (def (uq B)
          (struct intern
            ((pos (uq A))
             (vel (uq A))
             (frc (uq A))
             (rot (uq V))
             (tor (uq V))
             (rn (uq T))
             (hn (uq T))
             (color (Array (uq T) 3))
             (mass (uq T))
             (rad (uq T)))))
        (def = (fn intern bool ((p0 (ref (uq B))) (p1 (ref (uq B))))
          (p= p0 p1)))
        (def != (fn intern bool ((p0 (ref (uq B))) (p1 (ref (uq B))))
          (not (p= p0 p1))))
        (def act (fn intern bool ((ball (ref (uq B))))
          (setf (:@ ball vel) (/ (@:@ ball frc) (@:@ ball mass)))
          (incf (:@ ball pos) (@:@ ball vel))
          (incf (:@ ball rot) (/ (@:@ ball tor) (* (cast (pi) (uq T)) (@:@ ball mass))))
          (mulf (:@ ball frc) (cast 0.95 (uq T)))
          (mulf (:@ ball tor) (cast 0.95 (uq T)))))
        (implement Struct (Ball (uq T) (uq N)))
        (implement EqualityComparable (Ball (uq T) (uq N))))))
  
  
  
  (def-concept-macro collide intern ((T Type))
    (qq using-namespace std
       ;(import operator-macros)
       (def collide (fn intern void ((p0 (ref (uq T))) (p1 (ref (uq T))))
         (let ((m0 \ (@:@ p0 mass))
               (m1 \ (@:@ p1 mass))
               (disr \ (- (@:@ p0 pos) (@:@ p1 pos)))
               (dis2 \ (+ (pow (@$ disr 0) 2) (pow (@$ disr 1) 2))))
           (when (>' dis2 0.0)
             (let ((dis \ (sqrt dis2))
                   (r0 \ (@:@ p0 rad))
                   (r1 \ (@:@ p1 rad))
                   (rs \ (+ r0 r1))
                   (acc \ (* disr (/ (* (* m0 m1) gravity) (* dis dis2)))))
               (when (< dis rs)
                 (let ((v0 \ (@:@ p0 vel))
                       (v1 \ (@:@ p1 vel))
                       (dv \ (- v0 v1))
                       (st \ 0.5)
                       (rn \ 0.5)
                       (dir \ (/ disr dis))
                       (s (Array float 2) ((elements (array (* (@$ dir 1) -1.0)
                                                            (* (@$ dir 0) 1.0)))))
                       (sr \ (do (+ (/ (* (@:@ p0 tor) r0) m0)
                                    (/ (* (@:@ p1 tor) r1) m1)) 0.0))
                       (vr \ (do (dot (- v0 v1) s) ))
                       (mfac \ (/ (* m0 m1) (+ m0 m1)))
                       (rr \ (* (- sr vr) (* rn mfac)))
                       (rv \ (* s rr))
                       (col \ (* dir (* (* st mfac) (- dis rs)))))
                   (setv acc (+ col (/ rv dis)))
                   (mfor p (p0 p1)
                     (decf (:@ p tor) (/ rr (* dis 1.0))))))
               (incf (:@ p1 frc) acc)
               (decf (:@ p0 frc) acc))))))))


  (def-type-macro Connection)
  (def-concept-macro Connection intern ((T Type))
    (qq using-namespace std
      (using-namespace std.concepts
        (def (Connection (uq T))
          (struct intern ((object0 (uq T)) (object1 (uq T))
                          (length float)
                          (strength float))))
        (implement MoveConstructible (Connection (uq T)))
        (def act (fn intern void ((conn (Connection (uq T))))
          (let ((p0 \ (@: conn object0))
                (p1 \ (@: conn object1))
                (rs \ (@: conn length))
                (st \ (@: conn strength))
                (m0 \ (@:@ p0 mass))
                (m1 \ (@:@ p1 mass))
                (disr \ (- (@:@ p0 pos) (@:@ p1 pos)))
                (dis2 \ (+ (pow (@$ disr 0) 2.0) (pow (@$ disr 1) 2.0)))
                (dis \ (sqrt dis2))
                (acc \ (* disr (* (* st (/ (* m0 m1) (+ m0 m1))) (/ (- dis rs) dis)))))
            (incf (:@ p1 frc) acc)
            (decf (:@ p0 frc) acc)))))))



  (def-type-macro Cluster)
  (def-concept-macro Cluster intern ((T Type))
    (qq do
      (using-namespace std.concepts
        (implement Vector (uq T))
      )
      (def (Cluster (uq T))
        (struct intern ((vector (Vector (uq T))))))))

  (def implement-default (macro intern (types nums)
    (qq using-namespace std.concepts
      (mfor T (uq types)
        (mfor N (uq nums)

        (implement BasicMath T)

        (instantiate Array T N)
        (instantiate basic-math (Array T N))

        (def dot (fn intern T ((x (Array T N)) (y (Array T N)))
          (+ (* (@$ x 0) (@$ y 0)) (* (@$ x 1) (@$ y 1)))))

        (instantiate Array T 3)

        (instantiate Ball T N)
        (instantiate collide (Ball T N))
        (def-ptr-macro2 collide intern (Ball T N))
        (instantiate UniquePtr (Ball T N))
        (def = (fn intern bool ((p0 (ref (const (UniquePtr (Ball T N)))))
                                (p1 (ref (const (UniquePtr (Ball T N))))))
          (p= p0 p1)))
        (def != (fn intern bool ((p0 (ref (const (UniquePtr (Ball T N)))))
                                 (p1 (ref (const (UniquePtr (Ball T N))))))
          (not (p= p0 p1))))
        (implement EqualityComparable (UniquePtr (Ball T N)))
        (instantiate swap (UniquePtr (Ball T N)))
        (implement Swappable (UniquePtr (Ball T N)))
        (instantiate Vector (UniquePtr (Ball T N)))

        (implement Type (p (Ball T N)))
        (instantiate Connection (p (Ball T N)))
        
        (instantiate Vector (Connection (p (Ball T N))))
        
        (def Game (struct intern
          ((world (Vector (UniquePtr (Ball T N))))
           (player (p (Ball T N)))
           (planet (p (Ball T N)))
 
           (wheel1 (p (Ball T N)))
           (wheel2 (p (Ball T N)))

           (connections (Vector (Connection (p (Ball T N))))))))

        (def game (var intern Game))
        (def rotvec (var intern (array-of N T) (array 1.0 0.0)))
        (def right-connection (var intern (p (Connection (p (Ball T N))))))
        (def left-connection (var intern (p (Connection (p (Ball T N))))))

        (def blombo-controls (fn intern void (void)
          (using-namespace std
            (let ((disr \ (- (@:@ (@: game player) pos) (@:@ (@: game planet) pos)))
                  (dis2 \ (+ (pow (@$ disr 0) 2) (pow (@$ disr 1) 2)))
                  (dis \ (sqrt dis2)))
            (setv rotvec (@: (/ disr dis) elements))))
          (let ((blen \ (- (if (is-pressed (@$ "a" 0)) 1.0 0.0) (if (is-pressed (@$ "d" 0)) 1.0 0.0)))
                (st \ 0.075)
                (alen \ (* st blen)))
            (setf (:@ left-connection length) (- 0.5 alen))
            (setf (:@ right-connection length) (+ 0.5 alen)))))

        (def wheel-controls (fn intern void (void)
          (using-namespace std
            (let ((disr \ (- (@:@ (@: game player) pos) (@:@ (@: game planet) pos)))
                  (dis2 \ (+ (pow (@$ disr 0) 2.0) (pow (@$ disr 1) 2.0)))
                  (dis \ (sqrt dis2)))
            (setv rotvec (@: (/ disr dis) elements))))
          (let ((blen \ (- (if (is-pressed (@$ "w" 0)) 1.0 0.0) (if (is-pressed (@$ "s" 0)) 1.0 0.0)))
                (st \ 0.005)
                (alen \ (* st blen)))
            (incf (:@ left-connection length) alen)
            (incf (:@ right-connection length) alen))
          (mfor wheel ((@: game wheel1) (@: game wheel2))
            (incf (:@ wheel tor) (+ (if (is-pressed (@$ "a" 0)) 0.0025 0.0)
                         (if (is-pressed (@$ "d" 0)) -0.0025 0.0))))
          (using-namespace std
            (let ((disr \ (- (@:@ (@: game player) pos) (@:@ (@: game planet) pos)))
                  (dis2 \ (+ (pow (@$ disr 0) 2.0) (pow (@$ disr 1) 2.0)))
                  (dis \ (sqrt dis2)))
            (setv rotvec (@: (/ disr dis) elements))))))

        (def up-controls (fn intern void (void)
          (using-namespace std
            (let ((disr \ (- (@:@ (@: game player) pos) (@:@ (@: game planet) pos)))
                  (dis2 \ (+ (pow (@$ disr 0) 2.0) (pow (@$ disr 1) 2.0)))
                  (dis \ (sqrt dis2)))
            (setv rotvec (@: (/ disr dis) elements))))
          (def up (var auto (Array float 2)
            ((elements (array
               (+ (if (is-pressed (@$ "a" 0)) -0.01 0.0)
                  (if (is-pressed (@$ "d" 0)) 0.01 0.0))
               (+ (if (is-pressed (@$ "w" 0)) 0.01 0.0)
                  (if (is-pressed (@$ "s" 0)) -0.01 0.0)))))))
          (def side (var auto (Array float 2)
            ((elements (array
              (@$ up 1)
              (- 0.0 (@$ up 0)))))))
          (incf (:@ (@: game player) frc) (+ (* up (@$ rotvec 1)) (* side (@$ rotvec 0))))))

        (def rot-controls (fn intern void (void)
          (let ((rot \ (:@ (@: game player) rot)))
            (incf (:@ (@: game player) tor) (+ (if (is-pressed (@$ "a" 0)) 0.0025 0.0)
                         (if (is-pressed (@$ "d" 0)) -0.0025 0.0)))
            (using-namespace std
              (setv rotvec (array (cos (@ rot)) (sin (@ rot))))
              (let ((arr (Array float 2) ((elements rotvec)))
                    (st \ 0.001)
                    (dir \ (+ (if (is-pressed (@$ "w" 0)) 1.0 0.0)
                              (if (is-pressed (@$ "s" 0)) -1.0 0.0)))
                    (f \ (* arr (* st dir))))
                (incf (:@ (@: game player) frc) f)))))))))))


  (implement-default (float) (2))

))

(def quad (var intern (array-of 4 (array-of 2 float))
  (array (array -1.0 -1.0)
         (array -1.0 1.0)
         (array 1.0 1.0)
         (array 1.0 -1.0))))

(def max (fn intern int ((x int) (y int))
  (if (> x y) x y)))
(def min (fn intern int ((x int) (y int))
  (if (< x y) x y)))

(def init-world (fn intern void (void)
  (using-namespace std
    (for (i \ 0) (< i 16) (incv i)
      (let ((ball (p (Ball float 2)) (malloc' 1 (Ball float 2)))
            (up-ball (UniquePtr (Ball float 2))))
      (setf ball
        ((pos
           ((elements
              (array (* (cos (*' (/ (pi) 32.0) i)) 20.0)
                     (* (sin (*' (/ (pi) 32.0) i)) 20.0)))))
         (frc
           ((elements (array 0.0 0.0))))
         (mass 0.25)
         (rot 0.0)
         (tor 0.0)
         (color ((elements
                   (array 1.0 0.0 0.0))))
         (rad 0.05)))
      (init up-ball ball)
      (push-back (@: game world) (move up-ball))))
    (for (i \ 0) (< i 1) (incv i)
      (let ((ball (p (Ball float 2)) (malloc' 1 (Ball float 2)))
            (up-ball (UniquePtr (Ball float 2))))
      (setf ball
        ((pos
           ((elements (array 0.0 0.0))))
         (frc
           ((elements (array-of 2 float (array 0.0 0.0)))))
         (color ((elements
                   (array 1.0 0.0 0.0))))
         (rot 0.0)
         (tor 5000.0)
         (mass 51200.0)
         (rad 16.0)))
      (init up-ball ball)
      (setf (: game planet) ball)
      (push-back (@: game world) (move up-ball)))))
))



(def init-blombo (fn intern void (void)
  (let ((ball1 \ (malloc' 1 (Ball float 2)))
        (ball2 \ (malloc' 1 (Ball float 2)))
        (ball3 \ (malloc' 1 (Ball float 2)))
        (ball4 \ (malloc' 1 (Ball float 2)))
        (up-ball1 (UniquePtr (Ball float 2)))
        (up-ball2 (UniquePtr (Ball float 2)))
        (up-ball3 (UniquePtr (Ball float 2)))
        (up-ball4 (UniquePtr (Ball float 2))))
    (setf ball1
      ((pos ((elements (array 0.0 21.0))))
       (frc ((elements (array 0.0 0.0))))
       (color ((elements
                 (array 1.0 1.0 0.0))))
       (mass 1.0)
         (rot 0.0)
         (tor 0.0)
       (rad 0.1)))
    (setf ball2
      ((pos ((elements (array 0.25 20.5))))
       (frc ((elements (array 0.0 0.0))))
       (color ((elements
                 (array 1.0 1.0 0.0))))
       (mass 0.25)
         (rot 0.0)
         (tor 0.0)
       (rad 0.05)))
    (setf ball3
      ((pos ((elements (array -0.25 20.5))))
       (frc ((elements (array 0.0 0.0))))
       (color ((elements
                 (array 1.0 1.0 0.0))))
       (mass 0.25)
         (rot 0.0)
         (tor 0.0)
       (rad 0.05)))
    (setf ball4
      ((pos ((elements (array -0.1 21.5))))
       (frc ((elements (array 0.0 0.0))))
       (color ((elements
                 (array 0.5 0.0 1.0))))
       (mass 0.03125)
         (rot 0.0)
         (tor 0.0)
       (rad 0.0125)))
    (init up-ball1 ball1)
    (init up-ball2 ball2)
    (init up-ball3 ball3)
    (init up-ball4 ball4)
    (setf (: game player) ball1)
    (setf (: game wheel1) ball2)
    (setf (: game wheel2) ball3)
    (setf (: game planet) ball4)
    (push-back (@: game world) (move up-ball1))
    (push-back (@: game world) (move up-ball2))
    (push-back (@: game world) (move up-ball3))
    (push-back (@: game world) (move up-ball4))
    (let ((conn1 (Connection (p (Ball float 2)))
                 ((object0 ball1)
                  (object1 ball2)
                  (length 0.5)
                  (strength 0.5)))
          (conn2 (Connection (p (Ball float 2)))
                 ((object0 ball1)
                  (object1 ball3)
                  (length 0.5)
                  (strength 0.5)))
          (conn3 (Connection (p (Ball float 2)))
                 ((object0 ball2)
                  (object1 ball3)
                  (length 0.5)
                  (strength 0.1)))
          (conn4 (Connection (p (Ball float 2)))
                 ((object0 ball1)
                  (object1 ball4)
                  (length 0.25)
                  (strength 0.125))))
        (push-back (@: game connections) conn1)
        (push-back (@: game connections) conn2)
        (push-back (@: game connections) conn3)
        (push-back (@: game connections) conn4))
  (setv right-connection ($ (@: game connections) 0))
  (setv left-connection ($ (@: game connections) 1))
)))

(def init-snake (fn intern void (void)
  (using-namespace std
    (for ((i \ 8) (last \ (nullptr (Ball float 2))))
         (< i 15) (incv i)
      (let ((ball (p (Ball float 2)) (malloc' 1 (Ball float 2)))
            (up-ball (UniquePtr (Ball float 2))))
      (setf ball
        ((pos ((elements (array (*' 0.1 i) 25.0))))
         (frc ((elements (array 0.0 0.0))))
         (mass (*' 0.1 (+ (min i (- 15 i)) 1)))
         (rot 0.0)
         (tor 0.0)
         (color ((elements
                   (array 0.0 0.5 0.0))))
         (rad (sqrt (*' 0.001 (+ (min i (- 15 i)) 1))))))
      (init up-ball ball)
      (when (null last)
        (setf (: game player) ball))
      (when (not (null last))
        (let ((conn (Connection (p (Ball float 2)))
                    ((object0 last)
                     (object1 ball)
                     (length 0.25)
                     (strength 0.25))))
          (push-back (@: game connections) conn)))
      (setv last (get up-ball))
      (push-back (@: game world) (move up-ball))
  )))
  
  ;(setf (: game player) (get (@$ (@: game world) 7)))
))

(using-namespace gl
(def program (var intern Program))



(def init-program (fn intern void (void)
  (setv program (create-program))
  (let ((vertex-shader \ (create-shader vertex-shader))
        (fragment-shader \ (create-shader fragment-shader)))
    (shader-source vertex-shader "
      uniform vec2 cam;
      uniform vec2 pos;
      uniform float scale;
      uniform vec2 rotvec;
      varying vec2 p;
      varying vec2 c;
      void main(void) {
        
        c=gl_Vertex.xy;
        p=c*scale+pos;
        vec2 rot = normalize(rotvec);
        vec2 pcam = p-cam;
        vec2 pp = pcam*rot.y-vec2(pcam.y,-pcam.x)*rot.x;
        gl_Position = vec4(pp,0,1);
      }
    ")
    (compile-shader vertex-shader)
    (printf "v%i\n" (get-shader-iv vertex-shader compile-status))
    (shader-source fragment-shader "
      varying vec2 p;
      varying vec2 c;
      uniform vec2 lpos;
      uniform vec3 color;
      uniform vec2 rot;
      void main(void) {
        if(length(c)>1.0) {
          discard;
        }
        vec2 ldir=normalize(lpos-p);
        vec2 ccr = (rot.x*c+rot.y*vec2(c.y,-c.x));
        vec3 cr = vec3(1.0,0.25,0.25)*mod(ccr.x*4.0,1.0)+vec3(0.25,1.0,1.0)*mod(ccr.y*4.0, 1.0);
        float cn = max(dot(ldir,c),0.0)/4.0*3.0+0.25;
        gl_FragColor = vec4(color*cr*cn, 1.0);
      }
")
    (compile-shader fragment-shader)
    (printf "f%i\n" (get-shader-iv fragment-shader compile-status))
    (mfor s (vertex-shader fragment-shader)
      (attach-shader program s))
    (link-program program))))
)

(def x (var intern float 0.0))




(def controls (var intern (p (fn void (void))) (# wheel-controls)))

(def timer (fn intern void ((a int))
  (controls)

  (in a (@: game world)
    (let ((ball \ (get (@ a))))
      (act (@ ball))
      ))
  (in de (@: game connections)
    (act (@ de)))
  (for ((b \ (begin (@: game world))) (e \ (end (@: game world)))) (< b e) (setv b (successor b))
    (let ((p0 \ (get (@ (source b)))))
      (for ((b2 \ (successor b)) (e \ (end (@: game world)))) (< b2 e) (setv b2 (successor b2))
          (let ((p1 \ (get (@ (source b2)))))
            (collide p0 p1) ))))
    (glutPostRedisplay)
    (glutTimerFunc (/ 1000 32) (# timer) 0)))


(using-namespace glut
(def main (fn extern-c int ((argc int) (argv (p (p char))))
  


  (init (@: game world) 512)
  (init (@: game connections) 512)


  (init (# argc) argv)
  (init-display-mode (| depth (| single rgba)))
  (init-window-position 100 100)
  (init-window-size 500 500)
  (create-window "test")

  (init-program)
  
  ;(init-snake)
  (init-world)
  (init-blombo)
  (timer 0)

  (glutKeyboardFunc (fn void ((key char) (x int) (y int))
    (press key)))

  (glutKeyboardUpFunc (fn void ((key char) (x int) (y int))
    (release key)))

  (display-func (void)
    (using-namespace gl
    (using-namespace std
      (uniform (get-uniform-location program "cam") (: (@:@ (@: game player) pos) elements))
      (clear color)
      (enable-client-state vertex-array)
      (use-program program)
      (incf (# x) 0.01)
      (uniform (get-uniform-location program "lpos") (* 32.0 (sin x)) (* 32.0 (cos x)))
      (uniform (get-uniform-location program "rotvec") (# rotvec))
      (in a (@: game world)
        (uniform (get-uniform-location program "pos") (: (@:@ (get (@ a)) pos) elements))
        (uniform (get-uniform-location program "rot") (cos (@:@ (get (@ a)) rot)) 
                                                      (sin (@:@ (get (@ a)) rot)))
        (uniform (get-uniform-location program "color") (: (@:@ (get (@ a)) color) elements))
        (uniform (get-uniform-location program "scale") (@:@ (get (@ a)) rad))
        (vertex-pointer 2 float 0 quad)
        (draw-arrays triangle-fan 0 4))
      (disable-client-state)
      (end)
      (flush)
      (return))))
  (main-loop)
  (return 0)))
)
