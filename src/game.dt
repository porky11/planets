(import gl)
(import glut)
(import spatial)
(import util)

(import cstdio)
(import math)
(import unique-ptr)
(import concept-defs)
(import derivations)
(import array)
(import vector)

 
(std.concepts.instantiate Array float 2)

(def Planet (struct intern
  ((pos (Array float 2))
   (vel (Array float 2)))))

(def = (fn intern bool ((p0 Planet) (p1 Planet))
  (and (= (@: p0 pos) (@: p1 pos))
       (= (@: p0 vel) (@: p1 vel)))))

(def != (fn intern bool ((p0 Planet) (p1 Planet))
  (or (!= (@: p0 pos) (@: p1 pos))
      (!= (@: p0 vel) (@: p1 vel)))))

(using-namespace std.concepts
  (implement Type Planet)
  (implement Struct Planet)
  (implement EqualityComparable Planet)
  (instantiate UniquePtr Planet))

(def = (fn intern bool ((p0 (ref (const (UniquePtr Planet))))
                        (p1 (ref (const (UniquePtr Planet)))))
  (p= p0 p1)))

(def != (fn intern bool ((p0 (ref (const (UniquePtr Planet))))
                        (p1 (ref (const (UniquePtr Planet)))))
  (not (p= p0 p1))))

(using-namespace std.concepts
  (implement EqualityComparable (UniquePtr Planet))
  (instantiate swap (UniquePtr Planet))
  (implement Swappable (UniquePtr Planet))
  (instantiate Vector (UniquePtr Planet)))

(def world (var intern (Vector (UniquePtr Planet))))

(using-namespace std.macros
(def pos (macro intern ((planet Planet))
  (qq : (uq planet) pos)))
(def vel (macro intern ((planet Planet))
  (qq : (uq planet) vel))))

(def pi (macro intern (void)
  (q 3.14159265358979323846)))

(using-namespace std
(def init-circle (fn intern void ((circle (p (array-of 32 (array-of 2 float)))))
  (let ((i int 0))
    (for true (< i 32) (incv i)
      (setf ($ (@ ($ (@ circle) i)) 0) (cos (*' (/' (pi) 16) i)))
      (setf ($ (@ ($ (@ circle) i)) 1) (sin (*' (/' (pi) 16) i)))))
      (return))))


(def circle (var intern (array-of 32 (array-of 2 float))))

(using-namespace gl
(def program (var intern Program))

(def init-program (fn intern void (void)
  (setv program (create-program))
  (let ((vertex-shader \ (create-shader vertex-shader))
        (fragment-shader \ (create-shader fragment-shader)))
    (shader-source vertex-shader "
      uniform vec2 pos;
      uniform float scale;
      varying vec2 p;
      varying vec2 c;
      void main(void) {
        c=gl_Vertex.xy;
        p=c*scale+pos;
        gl_Position = vec4(p,0,1);
      }
    ")
    (compile-shader vertex-shader)
    (printf "v%i\n" (get-shader-iv vertex-shader compile-status))
    (shader-source fragment-shader "
varying vec2 p;
varying vec2 c;
uniform vec2 lpos;
void main(void) {
  vec2 ldir=normalize(lpos-p);
  float cn = max(min(1,dot(ldir,c)),0);
  gl_FragColor = vec4(
    0,
    0,
    cn,
    1
  );
}
")
    (compile-shader fragment-shader)
    (printf "f%i\n" (get-shader-iv fragment-shader compile-status))
    (mfor s (vertex-shader fragment-shader)
      (attach-shader program s))
    (link-program program))))
)

(def x (var intern float 0.0))



(using-namespace glut
(def main (fn extern-c int ((argc int) (argv (p (p char))))
  


  (init world 8)

  (init (# argc) argv)
  (init-display-mode (| depth (| single rgba)))
  (init-window-position 100 100)
  (init-window-size 500 500)
  (create-window "test")

  (init-program)
  (init-circle (# circle))

  (using-namespace std
    (for (i \ 0) (< i 8) (incv i)
      (let ((planet (p Planet) (malloc' 1 Planet))
            (up-planet (UniquePtr Planet)))
        (setf ($ (@:@ planet pos) 0) 0.0)
        (setf ($ (@:@ planet pos) 1) 0.0)
        (setf ($ (@:@ planet vel) 0) (/ (cos (*' (/ (pi) 4.0) i)) 50000.0))
        (setf ($ (@:@ planet vel) 1) (/ (sin (*' (/ (pi) 4.0) i)) 50000.0))
        (init up-planet planet)
        (push-back world (move up-planet)))))

  (idle-func (void)
    (for (i \ 0) (< i 8) (incv i)
      (let ((planet \ (get (@ ($ world i)))))
        (incf ($ (@:@ planet pos) 0) (@$ (@:@ planet vel) 0))
        (incf ($ (@:@ planet pos) 1) (@$ (@:@ planet vel) 1))))
    (glutPostRedisplay)
    (return))

  (display-func (void)
    (using-namespace gl
    (using-namespace std
      (clear color)
      (enable-client-state vertex-array)
      (use-program program)
      (incf (# x) 0.002)
      (def y (var auto \ (/ (sqrt x) 10.0)))
      (uniform (get-uniform-location program "lpos") (* y (sin x)) (* y (cos x)))
      (uniform (get-uniform-location program "scale") 0.1)
      (for (i \ 0) (< i 8) (incv i)
        (let ((myvar (array-of 2 float)))
          (setf ($ myvar 0) (@$ (@:@ (get (@ ($ world i))) pos) 0))
          (setf ($ myvar 1) (@$ (@:@ (get (@ ($ world i))) pos) 1))
          (uniform (get-uniform-location program "pos") (# myvar))
          (vertex-pointer 2 float 0 circle)
          (draw-arrays triangle-fan 0 32)))
      (disable-client-state)
      (end)
      (flush)
      (return))))
  (main-loop)
  (return 0)))
)
