(module gl)

(import enum)
(import util)

;;;constants


(namespace gl

#|
(def-enum attrib-mask extern uint
                      ((current 0x1)
                       (point 0x2)
                       (line 0x4)
                       (polygon 0x8)
                       (polygon-stripple 0x10)
                       (pixel-mode 0x20)
                       (lightning 0x40)
                       (fog 0x80)
                       (depth-buffer 0x100)
                       (accum-buffer 0x200)
                       (stencil-buffer 0x400)
                       (viewport 0x800)
                       (transform 0x1000)
                       (enable 0x2000)
                       (color-buffer 0x4000)
                       (hint 0x8000)
                       (eval 0x10000)
                       (list 0x20000)
                       (texture 0x40000)
                       (scissor 0x80000)
                       (multisample 0x20000000)
                       (all-attrib 0xFFFFFFFF)))
|#                         
    
  (def-enum clear-buffer-mask
    extern uint
      ((depth 0x100)
       (accum 0x200)
       (stencil 0x400)
       (color 0x4000)
       (coverage 0x8000)))


#|  (def-enum client-attrib-mask
    extern uint
      ((pixel-store 0x1)
       (vertex-array 0x2)
       (all-attrib 0xFFFFFFFF)))
|#
  (def-enum context-flag-mask
    extern uint
      ((forward-compatible 0x1)
       (debug 0x2)
       (robust-access 0x4)
       (no-error 0x8)))

  (def-enum pname
    extern uint
      ((shader-type 0x8B4F)
       (delete-status 0x8B80)
       (compile-status 0x8B81)
       (info-log-length 0x8B84)
       (shader-source-length 0x8B88)))

  (def-enum context-profile-mask
    extern uint
      ((core 0x1)
       (compability 0x2)))


  (def-enum shader-type
    extern uint
      ((fragment-shader 0x8B30)
       vertex-shader))

  (def-enum primitive
     extern uint (points
                       lines line-loop line-strip
                       triangles triangle-strip triangle-fan
                       quads quad-strip
                       polygon))

  (def-enum type
    extern uint ((byte 0x1400) ubyte
                       short ushort
                       int uint
                       float
                       bytes-2 bytes-3 bytes-4
                       double))
  (def-enum array
    extern uint ((vertex-array 0x8074) normal-array color-array index-array texture-coord-array edge-flag-array))
)


(import macros)

;;cfun



;;;types
(namespace gl
  (def Shader (struct extern ((value uint))))
  (def Program (struct extern ((value uint))))
  (def Location (struct extern ((value int))))
)

(namespace gl
(using-namespace std.macros




  (defc uniform extern
   glUniform1f void ((location Location) (v0 float)) location v0)
  (defc uniform extern
   glUniform2f void ((location Location) (v0 float) (v1 float)) location v0 v1)
  (defc uniform extern
   glUniform3f void ((location Location) (v0 float) (v1 float) (v2 float)) location v0 v1 v2)
  (defc uniform extern
   glUniform4f void ((location Location) (v0 float) (v1 float) (v2 float) (v3 float)) location v0 v1 v2 v3)

  (defc uniform extern glUniform1i void ((location Location) (v0 int)) location v0)
  (defc uniform extern glUniform2i void ((location Location) (v0 int) (v1 int)) location v0 v1)
  (defc uniform extern glUniform3i void ((location Location) (v0 int) (v1 int) (v2 int)) location v0 v1 v2)
  (defc uniform extern glUniform4i void ((location Location) (v0 int) (v1 int) (v2 int) (v3 int)) location v0 v1 v2 v3)

  (defc uniform extern glUniform1ui void ((location Location) (v0 uint)) location v0)
  (defc uniform extern glUniform2ui void ((location Location) (v0 uint) (v1 uint)) location v0 v1)
  (defc uniform extern glUniform3ui void ((location Location) (v0 uint) (v1 uint) (v2 uint)) location v0 v1 v2)
  (defc uniform extern glUniform4ui void ((location Location) (v0 uint) (v1 uint) (v2 uint) (v3 uint)) location v0 v1 v2 v3)

  (defc uniform extern glUniform1fv void ((location Location) (value (p (array-of 1 float)))) location value)
  (defc uniform extern glUniform2fv void ((location Location) (value (p (array-of 2 float)))) location value)
  (defc uniform extern glUniform3fv void ((location Location) (value (p (array-of 3 float)))) location value)
  (defc uniform extern glUniform4fv void ((location Location) (value (p (array-of 4 float)))) location value)

  (defc uniform extern glUniform1iv void ((location Location) (value (p (array-of 1 int)))) location value)
  (defc uniform extern glUniform2iv void ((location Location) (value (p (array-of 2 int)))) location value)
  (defc uniform extern glUniform3iv void ((location Location) (value (p (array-of 3 int)))) location value)
  (defc uniform extern glUniform4iv void ((location Location) (value (p (array-of 4 int)))) location value)

  (defc uniform extern glUniform1uiv void ((location Location) (value (p (array-of 1 uint)))) location value)
  (defc uniform extern glUniform2uiv void ((location Location) (value (p (array-of 2 uint)))) location value)
  (defc uniform extern glUniform3uiv void ((location Location) (value (p (array-of 3 uint)))) location value)
  (defc uniform extern glUniform4uiv void ((location Location) (value (p (array-of 4 uint)))) location value)

(defc get-uniform-location extern
   glGetUniformLocation Location ((program Program) (name (p (const char)))) program name)

(defc create-shader extern
  glCreateShader Shader ((shader-type shader-type)) shader-type)

(def glShaderSource (fn extern-c void ((shader Shader) (a int) (str (p (p (const char)))) (p (p int)))))
(def shader-source (fn extern void ((shader Shader) (str (p (const char))))
  (glShaderSource shader 1 (# str) (nullptr int))))

(defc compile-shader extern glCompileShader void ((shader Shader)) shader)

(defc create-program extern glCreateProgram Program (void))

(defc attach-shader extern glAttachShader void ((program Program) (shader Shader)) program shader)
  (ignore def attach-shader (macro extern ((program Program) (shader Shader) ...)
    (qq do (attach-shader (uq program) (uq shader))
           (attach-shader (uq program) (uql (get-varargs-list (- (arg-count mc) 2)))))))

(def glGetShaderiv (fn extern-c void ((shader Shader) (pname pname) (a (p int)))))
(def get-shader-iv (fn extern (retval int) ((shader Shader) (pname pname))
  (glGetShaderiv shader pname retval)))

(defc link-program extern glLinkProgram void ((program Program)) program)

(defc use-program extern glUseProgram void ((program Program)) program)

(defc clear extern glClear void ((mask clear-buffer-mask)) mask)
(defc begin extern glBegin void ((mode primitive)) mode)

  (defc vertex extern glVertex2s void ((x uint16) (y uint16)) x y)
  (defc vertex extern glVertex3s void ((x uint16) (y uint16) (z uint16)) x y z)
  (defc vertex extern glVertex4s void ((x uint16) (y uint16) (z uint16) (w uint16)) x y z w)

  (defc vertex extern glVertex2i void ((x int) (y int)) x y)
  (defc vertex extern glVertex3i void ((x int) (y int) (z int)) x y z)
  (defc vertex extern glVertex4i void ((x int) (y int) (z int) (w int)) x y z w)

  (defc vertex extern glVertex2f void ((x float) (y float)) x y)
  (defc vertex extern glVertex3f void ((x float) (y float) (z float)) x y z)
  (defc vertex extern glVertex4f void ((x float) (y float) (z float) (w float)) x y z w)

  (defc vertex extern glVertex2d void ((x double) (y double)) x y)
  (defc vertex extern glVertex3d void ((x double) (y double) (z double)) x y z)
  (defc vertex extern glVertex4d void ((x double) (y double) (z double) (w double)) x y z w)


(defc end extern glEnd void (void))
(defc enable-client-state extern glEnableClientState void ((array array)) array)
(defc disable-client-state extern glDisableClientState void (void))

(defc draw-arrays extern glDrawArrays void ((mode primitive) (first int) (count int)) mode first count)

(defc vertex-pointer extern
  glVertexPointer void ((size int) (type type) (stride int) (ptr (p void))) size type stride ptr)
 #|
(def with-client-state (macro extern (state ...)
  (qq do (enable-client-state (uq state))
         (uql (get-varargs-list (- (argcount mc) 1)))
         (disable-client-state))))
         |#

(defc flush extern glFlush void (void))
))
