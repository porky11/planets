(module sequence-math)

(import macros)
(import stdlib)
(import array)
(import concepts)
(import assert)


(using-namespace std.macros
(def in (macro extern (name value ...)
  (let ((en \ (make-gensym-var-node mc))
        (bn \ (make-gensym-var-node mc)))
    (qq let (((uq en) \ (end (uq value))))
      (for ((uq bn) \ (begin world)) (< (uq bn) (uq en)) (setv (uq bn) (successor (uq bn)))
        (let (((uq name) \ (source b)))
          (uql (get-varargs-list (- (arg-count mc) 2)))))))))
)

(using-namespace std.macros
(using-namespace std.concepts
  (def-concept-macro + intern ((T Type))
    (qq def + (macro intern ((a (uq T)) (b (uq T)))
      (let ((tmp \ (make-gensym-var-node mc)))
      (qq do
        (std.assert (= (size (uq (uq a))) (size (uq (uq b)))))
        (def (uq (uq tmp)) (var auto (uq T)))
        (for (i \ 0) (< i (cast (size (uq (uq a))) int)) (incv i)
          (setf ($ (uq (uq tmp)) i) (+ (@$ (uq (uq a)) i) (@$ (uq (uq  b)) i))))
        (move (uq (uq tmp))))))))
      
  (instantiate Array int 2)
  (instantiate + (Array int 2))
))
  
