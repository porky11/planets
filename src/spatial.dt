(module spatial)
#|

(import util)
(import macros)

(using-namespace std.macros

(def tri (fn intern int ((x int)))
  (if (= x 1) 0 (+ (- x 1) (tri (- x 1)))))

(def over (fn intern (retval int 0) ((n int) (k int))
  (for (i \ 1) (<= i k) (incv i)
    (incf retval (/ (- (+ n 1) i) i)))))
(def-type-macro3 Multivector)
(def-concept Multivector extern ((T Type) (D Value) (I Value))
  (let ((dim int)
        (ind int)
        (valid1 bool (eval-expression mc (q int) D (cast (# dim) (p void))))
        (valid2 bool (eval-expression mc (q int) I (cast (# ind) (p void))))
        (n int (over dim ind))
        (N \ (mnfn mc n))
        (A (qq array-of (uq N) (uq T)))
        (M (qq Multivector (uq T) (uq D) (uq I))))
    (qq do
      (def (uq M) (struct extern ((elements (uq A)))))
      (def + (fn intern (retval M) ((a (uq M)) (a (uq M)))
        (mfor i (range (uq N))
          (setf ($ (@:@ retval elements) i) ())

(def Vector (macro extern (T D I))
  (qq Multivector (uq T) (uq D) 1))

(def-type-macro2 Force)
(def-concept Force ((T Type) (N Value))
  (let ((n int)
        (valid bool (eval-expression mc (q int) N (cast (# n) (p void))))
        (NN \ (make-node-from-value mc (tri n)))
        (F \ (qq Force (uq T) (uq N))))
  (qq do
    (def (uq F)
      (struct extern
        (vector (Array (uq T) (uq N)))
        (bivector (Array (uq T) (uq NN)))))
    (def + (fn extern (retval (uq F)) ((a (uq F)) (b (uq F)))
      (setf (:@ retval vector) (+ a b))
      (setf (:@ retval vector) (+ a b))))
    (def - (fn extern (retval (uq F)) ((a (uq F)) (b (uq F)))
      (setf (:@ retval vector) (- a b))
      (setf (:@ retval vector) (- a b))))
    (implement Add (uq F))
    (implement Sub (uq F)))))

(def-type-macro2 Motion)
(def-concept Motion ((T Type) (N Value))
  (let ((n int)
        (valid bool (eval-expression mc (q int) N (cast (# n) (p void))))
        (NN \ (make-node-from-value mc (tri n)))
        (F \ (qq Motion (uq T) (uq N))))
  (qq do
    (def (uq F)
      (struct extern
        (vector (Array (uq T) (uq N)))
        (bivector (Array (uq T) (uq NN)))))
    (def + (fn extern (retval (uq F)) ((a (uq F)) (b (uq F)))
      (setf (:@ retval vector) (+ a b))
      (setf (:@ retval vector) (+ a b))))
    (def - (fn extern (retval (uq F)) ((a (uq F)) (b (uq F)))
      (setf (:@ retval vector) (- a b))
      (setf (:@ retval vector) (- a b))))
    (implement Add (uq F))
    (implement Sub (uq F)))))

(def apply-force (fn intern ((

      

(def displace (macro intern (mover vel)
  (qq incf (pos (uq mover)) (uq vel))))

(def accelerate (macro intern (mover acc)
  (qq incf (vel (uq mover)) (uq acc))))


)
|#
