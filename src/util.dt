(module util)

(import macros)
(import concepts)
(import cstdlib)

#|
@macro mexit

Stops the compiliation of program.
Useful for debug reasons, when you know some error appears before this macro is expanded.

|#
(using-namespace std
(def mexit (macro extern (void)
  (exit 1)
  (q 0)))
)




(using-namespace std.macros

(def ignore (macro extern (rest)
  (qq no-op)))

(def pow (macro extern (x (n int))
    (def n0 (var auto int))
    (if (eval-expression mc (q int) n (cast (# n0) (p void)))
        (do (if (= n0 1) x
                (let ((n1 \ (- n0 1))
                      (nn \ (mnfv mc n1)))
                  (if (is-lvalue mc x)
                    (qq * (uq x) (pow (uq x) (uq nn)))
                    (let ((tmp \ (make-gensym-var-node mc)))
                      (qq let (((uq tmp) \ (uq x)))
                        (* (uq tmp) (pow (uq tmp) (uq nn)))))))))
        (do (report-error mc n "unable to evaluate\n") (qq no-op)))))

(def is-zero (fn extern bool ((a float))
  (= a 0.0)))

(def is-zero (fn extern bool ((a double))
  (= a (cast 0.0 double))))

(def is-zero (fn extern bool ((a long-double))
  (= a (cast 0.0 long-double))))


(def /0 (macro extern (x y)
  (qq if (is-zero (uq y))
    (* (uq x) (uq y))
    (/ (uq x) (uq y)))))

(def when (macro extern (con rest)
  (def list (var auto \ (get-varargs-list mc (- (arg-count mc) 1) rest)))
  (qq if (uq con) (do (uql list)) false)))

(def unless (macro extern (con rest)
  (def list (var auto \ (get-varargs-list mc (- (arg-count mc) 1) rest)))
  (qq if (uq con) false (do (uql list)))))

(ignore def in (macro extern (name value rest)
  (let ((list \ (get-varargs-list mc (- (arg-count mc) 2) rest))
        (en \ (make-gensym-var-node mc))
        (bn \ (make-gensym-var-node mc)))
    (if (is-lvalue mc value)
      (qq for (((uq bn) \ (begin (uq value))) ((uq en) \ (end (uq value))))
              (< (uq bn) (uq en))
              (setv (uq bn) (successor (uq bn)))
        (let (((uq name) \ (source (uq bn))))
          (uql list)))
      (let ((val \ (make-gensym-var-node mc)))
        (qq let (((uq val) \ (uq value)))
          (in (uq name) (uq val) (uql list))))))))

)

(using-namespace std.macros


(def def-type-macro2
  (macro extern (name)
    (let ((buf (array-of 250 char)))
      (sprintf buf "\"%s\"" (@:@ name token-str))
      (let ((string \ (std.macros.mnfv mc buf)))
        (qq do
          (def (uq name)
            (macro extern (T U)
              (let ((typename (array-of 250 char)))
                (and (not (make-type-string mc (uq string) T U typename))
                     (return T))
                (def n (var auto (p DNode) (mnfv mc typename)))
                n))))))))

(ignore def def-type-macro2
  (macro extern (macro-name name)
    (let ((buf (array-of 250 char)))
      (sprintf buf "\"%s\"" (@:@ name token-str))
      (let ((string \ (std.macros.mnfv mc buf)))
        (qq do
          (def (uq macro-name)
            (macro extern (T U)
              (let ((typename (array-of 250 char)))
                (and (not (make-type-string mc (uq string) T U typename))
                     (return T))
                (def n (var auto (p DNode) (mnfv mc typename)))
                n))))))))

(def as-macro (macro extern (rest)
  (let ((macro-name \ (make-gensym-var-node mc)))
    (qq do
      (def (uq macro-name) (macro extern (void)
        (uql (get-varargs-list mc (arg-count mc) rest))))
      ((uq macro-name))))))

(ignore def make-type-node
  (fn extern (p DNode) ((mc (p MContext)) (name (p DNode)) (T (p DNode)) (U (p DNode)))
    (let ((buf (array-of 250 char)))
      (sprintf buf "\"%s\"" (@:@ name token-str))
      (let ((string \ (std.macros.mnfv mc buf)))
        (qq do
          (as-macro
            (let ((typename (array-of 250 char)))
              (and (not (make-type-string mc (uq string) (q (uq T)) (q (uq U)) typename))
                   (return T))
              (def n (var auto (p DNode) (mnfv mc typename)))
              n)))))))


(using-namespace std.concepts
(def def-type-macro2+
  (macro extern (name)
    (let ((buf (array-of 250 char)))
      (sprintf buf "\"%s\"" (@:@ name token-str))
      (let ((string \ (std.macros.mnfv mc buf)))
        (qq do
          (def (uq name)
            (macro extern (T U)
              (let ((typename (array-of 250 char)))
                (and (not (make-type-string mc (uq string) T U typename))
                     (return T))
                (def n (var auto (p DNode) (mnfv mc typename)))
                (if (exists-type mc typename)
                    n
                    (do
                      (qq instantiate (uq (uq name)) (uq (uq T)) (uq (uq U)))
                      n))))))))))
)

(def def-ptr-macro (macro extern (name linkage type)
  (qq using-namespace std.macros
    (def (uq name) (macro (uq linkage) ((value (p (uq type))))
      (qq (uq name) (@ (uq (uq value)))))))))

(def def-ptr-macro2 (macro extern (name linkage type)
  (qq using-namespace std.macros
    (def (uq name) (macro (uq linkage) ((value1 (p (uq type))) (value2 (p (uq type))))
      (qq (uq name) (@ (uq (uq value1))) (@ (uq (uq value2)))))))))

(def macro-print (macro extern (object)
  (print object)
  (printf "\n")
  (qq no-op)))

(def incf (macro extern (val res)
  (let ((pos \ (make-gensym-var-node mc)))
    (qq let (((uq pos) \ (uq val)))
      (setf (uq pos) (+ (@ (uq pos)) (uq res)))))))

(def decf (macro extern (val res)
  (let ((pos \ (make-gensym-var-node mc)))
    (qq let (((uq pos) \ (uq val)))
      (setf (uq pos) (- (@ (uq pos)) (uq res)))))))

(def mulf (macro extern (val res)
  (let ((pos \ (make-gensym-var-node mc)))
    (qq let (((uq pos) \ (uq val)))
      (setf (uq pos) (* (@ (uq pos)) (uq res)))))))

(def divf (macro extern (val res)
  (let ((pos \ (make-gensym-var-node mc)))
    (qq let (((uq pos) \ (uq val)))
      (setf (uq pos) (/ (@ (uq pos)) (uq res)))))))

(ignore using-namespace std.concepts
(def + (macro extern (a b)
  (let ((A \ (type-of mc a false))
        (B \ (type-of mc b false)))
      (ignore when (= A B)
        (report-error mc "For + both types should be the same")
        (return (qq no-op)))
      (qq using-namespace std.concepts
        (when (exists-concept +)
          (instantiate + (uq A)))
        (if (exists-fn (uq A) + (uq A) (uq A))
          (as-macro (qq + (uq a) (uq b)))
          (as-macro (qq no-op)))))))
)
)



